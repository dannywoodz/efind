@author Danny Woods <dannywoodz@yahoo.co.uk>
@copyright 2016 Danny Woods
@version 2.0
@title efind
@doc `efind' is a utility library in the spirit of the Unix `find' tool

<h1>Examples</h1>

{@link efind:find/1} and {@link efind:find/2} scan the selected root and return a list of results.

<pre lang="erlang">
  RootDir = "...".
  ListOfTuples = efind:find(RootDir). % Each tuple is {file, Filename} or {dir, Dirname}
  ListOfNames = efind:find(RootDir, [{result_type,names}]).
  ListOfFileNames = efind:find(RootDir, [{result_type,names},{dirs,false}]).
  ListOfDirNames = efind:find(RootDir, [{result_type,names},{files,false}]).
  ListOfXmlFiles = efind:find(RootDir,
  		 [{result_type,names},
		 {dirs,false},
		 {accept_fn, fun(Name) -> filename:extension(Name) == ".xml" end}]).
</pre>

{@link efind:scan/1} and {@link efind:scan/2} are lazy versions of <code>find</code>.  In concert
with {@link efind:next/1}, they can be used to walk the filesystem on-demand.  A scanner that is
drained of all content will return <code>finished</code> from {@link efind:next/1} and is
terminated automatically.  However, if you wish to abandon scanning early, you <em>must</em> call
{@link efind:close/1} to release the scanner.   You'll leak a process per invocation otherwise.

<pre lang="erlang">
  RootDir = "...".
  Scanner = efind:scan(RootDir),
  Fn = fun(finished, _F) ->
	  	io:format("Done~n"),
	  (Entry, F) ->
	  	io:format("~p~n", [Entry]),
		F(efind:next(Scanner), F)
	end,
  Fn(efind:next(Scanner), Fn).
</pre>
